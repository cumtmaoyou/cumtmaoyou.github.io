<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>从一开始</title>
    <url>/post/13d30382.html</url>
    <content><![CDATA[<h2 id="0x00-源起"><a href="#0x00-源起" class="headerlink" title="0x00.源起"></a>0x00.源起</h2><p>我在自己服务器上搭建的 Typecho 博客被备案这种事情折腾得头疼，终于忍不住放弃了；又见识了各种各样通过 Github Pages 创建的博客，终于忍不住想要试试 Hexo。</p>
<h2 id="0x01-折腾"><a href="#0x01-折腾" class="headerlink" title="0x01.折腾"></a>0x01.折腾</h2><p>零零散散大约花了两个上午的时间，算是折腾好了。这边也简单记一下折腾的步骤。</p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>这部分比较简单，跟着官方文档来，安装<a href="https://nodejs.org/en">nodejs</a>，完成后执行<code>nmp install -g hexo-cli</code>，简单两步环境就好了。接下来是创建一个文件夹，在新建的文件夹内通过<code>hexo init</code>命令建站。完后就可以通过<code>hexo s</code>来启动站点，并通过<a href="#">localhost:4000</a>在本地查看。但是在本地的 Blog 就失去了它的意义，我们需要把它部署到服务器上。这里我们选用 Github Pages 来部署我们的博客。</p>
<span id="more"></span>

<h3 id="部署到-Github"><a href="#部署到-Github" class="headerlink" title="部署到 Github"></a>部署到 Github</h3><ol>
<li>创建 Github 仓库<br>首先我们创建一个<a href="https://github.com/">Github</a>账号，并<a href="https://docs.github.com/cn/get-started/quickstart/create-a-repo">创建一个仓库</a>来存储我们的博客。仓库的名称一定要是<code>&#123;Github账号&#125;.github.io</code>才能使用<a href="https://cumtmaoyou.github.io/">{Github 账号}.github.io</a>这个域名来访问。官方文档上说可以通过 TravisCI 来自动部署，但是这个东西已经很老了，我大概看了下 TravisCI 的步骤，要使用就需要选择一个 Plan，即使选了免费的 Plan 也需要你填写信用卡账户，到这步我相信 90%的人都可以放弃了。这里我选择了 Github Actions 作为替代。</li>
<li>配置新的 Action 密钥</li>
</ol>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">生成公钥和私钥，以下命令将生成<span class="string">&quot;github-deploy-key&quot;</span>和<span class="string">&quot;github-deploy-key.pub&quot;</span>文件</span><br><span class="line"><span class="symbol">~</span>: ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure>

<ul>
<li>通过仓库的<code>Settings -&gt; Secrets -&gt; Add a new secret</code>菜单，添加一个新的 Secret，Name 可以自己取，这边用 HEXO_DEPLOY_PRI，Value 使用 github-deploy-key 文件的内容</li>
<li>通过仓库的<code>Settings -&gt; Deploy Keys -&gt; Add Deploy Key</code>菜单，添加新的 Deploy Key，Title 可以自己取，这边用 HEXO_DEPLOY_PUB，Key 使用 github-deploy-key.pub 文件的内容，添加的时候记得勾选上 Allow write access</li>
</ul>
<ol start="3">
<li>添加部署配置<br>在 hexo 站点根目录下依次创建<code>.github</code>, <code>workflows</code>文件夹，并在 workflows 文件夹中创建<code>deploy.yml</code>，复制下面内容到 yml</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">auto_ci</span> <span class="comment"># Action的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当推送到master分支的时候出发该Action</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量设置</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">cumtmaoyou</span> <span class="comment">#github账号</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="string">cumtxiaofeng@live.com</span> <span class="comment">#github邮箱</span></span><br><span class="line">  <span class="attr">THEME_REPO:</span> <span class="string">next-theme/hexo-theme-next</span> <span class="comment">#当前使用的Hexo的主题repo</span></span><br><span class="line">  <span class="attr">THEME_BRANCH:</span> <span class="string">master</span> <span class="comment"># 主题的repo分支名称</span></span><br><span class="line">  <span class="attr">DEPLOY_REPO:</span> <span class="string">cumtmaoyou/cumtmaoyou.github.io</span> <span class="comment">#自动部署到该repo</span></span><br><span class="line">  <span class="attr">DEPLOY_BRANCH:</span> <span class="string">autoci</span> <span class="comment">#自动部署的repo的分支名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务列表</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span> <span class="comment">#编译的名称 matri.node_version和matrix.os引用的下方的的os和node_version的配置</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 表明在ubuntu上编译</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-latest</span>] <span class="comment"># 系统用最新的ubuntu</span></span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">16.</span><span class="string">x</span>] <span class="comment"># node用16.x版本</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编译步骤</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment"># 首先是checkout该deploy.yml所在的仓库</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span> <span class="comment"># checkout主题仓库</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/next</span> <span class="comment"># check到themes/next文件夹下，这个文件夹与第一步所check仓库的根目录的同级</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span> <span class="comment">#checkout部署仓库</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.autoci</span> <span class="comment">#check到.autoci文件夹，这个文件夹与第一步所check仓库的根目录的同级</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="comment"># 安装node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span> <span class="comment"># 配置自动部署环境</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name $GIT_USER</span></span><br><span class="line"><span class="string">          git config --global user.email $GIT_EMAIL</span></span><br><span class="line"><span class="string"></span>      <span class="comment">#          cp .config.next.yml themes/next/_config.yml #这边可以复制一些额外的自定义文件到主题</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span> <span class="comment"># 执行node install</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span> <span class="comment"># 执行hexo的deploy命令</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm run deploy</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改 Hexo 的配置文件_config.yml</li>
</ol>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  repo: <span class="meta">&#123;$这里写github的repo地址，如果你启用了ssh，这边要写ssh地址，否则写http地址，简单说就是这个地址要可以正常使用git clone命令&#125;</span></span><br><span class="line">  branch: <span class="meta">&#123;$这里写自动部署到的repo分支名称&#125;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>设置 Github Pages<br>在仓库的<code>Settings -&gt; Pages -&gt; Source</code>菜单中选中 autoci 分支</li>
</ol>
<p>这个时候如果推送本地博客到 Github，那么就可以自动执行 Actions 了，并且会自动发布到 autoci 分支</p>
<h3 id="使用自己的域名"><a href="#使用自己的域名" class="headerlink" title="使用自己的域名"></a>使用自己的域名</h3><p>在 Source 文件夹下创建 CNAME 文件，填入自己的域名即可</p>
<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>主题的折腾永无止境，可以到<a href="https://hexo.io/themes/">Hexo 主题列表</a>选择自己喜欢的主题。我在折腾了三、四个主题后还是选择和<a href="https://github.com/next-theme/hexo-theme-next">NexT</a>，简单大气。当然也少不了个性话的定制了。<br>如果需要定制主题的页面，那么：</p>
<ul>
<li>在站点的 Source 文件夹下创建_data 文件夹</li>
<li>在_data 文件夹下创建以下十个文件<br><code>head.njk header.njk sidebar.njk post-meta.njk post-body-end.njk footer.njk body-end.njk variables.styl mixins.styl styles.styl</code></li>
<li>在主题配置里面搜索<code>custom_file_path</code>，并删除接下来十行前面的#号，以启用自定以文件</li>
</ul>
<p>修改 styles.styl，在里面写入你定制的 css</p>
<h3 id="添加-gitalk"><a href="#添加-gitalk" class="headerlink" title="添加 gitalk"></a>添加 gitalk</h3><p>NexT 主题已经集成了 gitalk，但是需要几个步骤来启用</p>
<ol>
<li>你需要一个保存评论的仓库，这里我选择仓库就是博客的仓库</li>
<li>创建 OauthApp，在个人 Settings，注意不是仓库的 Settings 里面，选择<code>Developer settings</code>，选择<code>Oauth Apps</code>，选中<code>New Oauth App</code></li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Application</span> <span class="selector-tag">Name</span>: 填入一个有意义的名字</span><br><span class="line"><span class="selector-tag">Homepage</span> <span class="selector-tag">URL</span>: 这个就写你博客的地址，如(<span class="attribute">https</span>:<span class="comment">//&#123;你的github账号.github.io&#125;)</span></span><br><span class="line">Application <span class="attribute">Description</span>: 自己写一个描述性文字</span><br><span class="line">Authorization callback <span class="attribute">URL</span>: 这个比较重要，必须得写你博客的地址</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建完成后点击 Generate New client secret，并保存生成的 Secret</li>
<li>修改主题配置<br>搜索<code>comments:</code>，修改 active 为 gitalk<br>修改 gitalk 配置</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">仓库的拥有者账号</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">这边写仓库的名字，注意这边不是url，只要写仓库名字，如cumtmaoyou.github.io，写错了就会出现Error</span> <span class="string">Not</span> <span class="string">Found，我在这边卡了很久</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">这个里写你刚才创建的Oauth</span> <span class="string">App的Client</span> <span class="string">ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">这个就是刚才生产的Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">仓库拥有账号，这里可以有多个，用[]来填，可以写合作者账号</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">false</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>到评论保存仓库的 issue 下创建一个初始评论</li>
<li>到这里就配置完成了，注意每次写一个新的 post 要自己等下 github 初始化一条评论，这里有自动化方法，但是我觉得自己登一下也不是很麻烦</li>
</ol>
<h3 id="关于字体的修改"><a href="#关于字体的修改" class="headerlink" title="关于字体的修改"></a>关于字体的修改</h3><ol>
<li>在主题的配置文件中搜索 Font settings，修改 global 即可，这里 font family 用一个英文的字体</li>
<li>在 style.styl 里用 css 的 font-face 创建一个本地字体，用 css 来精细调整每个 html 标签的字体</li>
<li>如果要用不同于 global 里配置的中文字体，在站点的 source&#x2F;_data&#x2F;variables.styl 里面填入以下文本</li>
</ol>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$fo</span>nt-family-chinese = <span class="string">&quot;Noto Serif SC&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Microsoft YaHei&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="symbol">$fo</span>nt-family-base = <span class="symbol">$fo</span>nt-family-chinese, sans-serif;</span><br><span class="line"><span class="symbol">$fo</span>nt-family-base = get_font_family(<span class="string">&#x27;global&#x27;</span>), <span class="symbol">$fo</span>nt-family-chinese, sans-serif <span class="keyword">if</span> get_font_family(<span class="string">&#x27;global&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="symbol">$fo</span>nt-family-logo = <span class="symbol">$fo</span>nt-family-base;</span><br><span class="line"><span class="symbol">$fo</span>nt-family-logo = get_font_family(<span class="string">&#x27;title&#x27;</span>), <span class="symbol">$fo</span>nt-family-base <span class="keyword">if</span> get_font_family(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="symbol">$fo</span>nt-family-headings = <span class="symbol">$fo</span>nt-family-base;</span><br><span class="line"><span class="symbol">$fo</span>nt-family-headings = get_font_family(<span class="string">&#x27;headings&#x27;</span>), <span class="symbol">$fo</span>nt-family-base <span class="keyword">if</span> get_font_family(<span class="string">&#x27;headings&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="symbol">$fo</span>nt-family-posts = <span class="symbol">$fo</span>nt-family-base;</span><br><span class="line"><span class="symbol">$fo</span>nt-family-posts = get_font_family(<span class="string">&#x27;posts&#x27;</span>), <span class="symbol">$fo</span>nt-family-base <span class="keyword">if</span> get_font_family(<span class="string">&#x27;posts&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="symbol">$fo</span>nt-family-monospace = consolas, Menlo, monospace, <span class="symbol">$fo</span>nt-family-chinese;</span><br><span class="line"><span class="symbol">$fo</span>nt-family-monospace = get_font_family(<span class="string">&#x27;codes&#x27;</span>), consolas, Menlo, monospace, <span class="symbol">$fo</span>nt-family-chinese <span class="keyword">if</span> get_font_family(<span class="string">&#x27;codes&#x27;</span>);</span><br></pre></td></tr></table></figure>

<div class="note primary"><p>暂时折腾这么多了，有空再慢慢玩</p>
</div>

<h2 id="0x02-hexo-的一些使用方法"><a href="#0x02-hexo-的一些使用方法" class="headerlink" title="0x02. hexo 的一些使用方法"></a>0x02. hexo 的一些使用方法</h2><ol>
<li>post 使用标签和分类</li>
</ol>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">在post的开头---之间加入</span><br><span class="line">categories:</span><br><span class="line"> - 记录生活</span><br><span class="line"><span class="keyword">tags:</span></span><br><span class="line"> - Green</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加 note</li>
</ol>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">note</span> default %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">这里面note块的内容</span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name">endnote</span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里 default 可以替换为<code>primary success info warning danger</code></p>
<h2 id="0x03-后记"><a href="#0x03-后记" class="headerlink" title="0x03. 后记"></a>0x03. 后记</h2><p>这是一个全新的博客，也是全新的起点，希望自己能坚持下来，不要半途而废</p>
]]></content>
      <categories>
        <category>折腾小记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenWRT问题小记</title>
    <url>/post/168ad1fd.html</url>
    <content><![CDATA[<h2 id="0x00-DDNS-无法正常工作"><a href="#0x00-DDNS-无法正常工作" class="headerlink" title="0x00. DDNS 无法正常工作"></a>0x00. DDNS 无法正常工作</h2><p>对于远程工作，我之前一直是使用<a href="https://sunlogin.oray.com/">向日葵</a>的，好处是简单易用，随时内网穿透。但是要说体验，那 windows 自身的远程桌面工具（RDP）是远超向日葵之类的工具的。想要 rdp 家庭网络，需要折腾几个东西：</p>
<ol>
<li>路由支持 DDNS。<br>这个一般路由器都提供 DDNS 的功能，我自己使用的是 OpenWRT 的软路由，安装 ddns-scrip 插件就可以了</li>
<li>ddns 服务提供商增加一条解析记录<br>我目前用的服务是 noip.com 提供的，可以免费使用，但是需要定期 renew 你的 hostname</li>
</ol>
<span id="more"></span>

<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>安装了 openclash 后，ddns 无法更新，重启 ddns 服务也不行</p>
<h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><ol>
<li>查看 ddns 配置，检查密码是否错误</li>
<li>重启 ddns 服务，发现还是无法更新</li>
<li>重启路由器，第一次更新正常，但是再手动点击更新，发现还是更新失败</li>
<li>查看 ddns 日志，发现 CURL 返回错误 28</li>
<li>找到日志里更新的 url，在浏览器里访问，发现更新正常</li>
<li>ssh 到路由，ping 更新的 URL，发现正常 ping</li>
<li>找到日志里更新的命令行，用执行该命令，发现失败</li>
<li>移除<code>--noproxy</code>参数，发现更新失败</li>
<li>移除<code>--interface</code>参数，发现更新成功，那应该就是<code>--interface</code>参数引起的</li>
</ol>
<p><em>到这里大致知道是什么问题引起的了，接下来尝试找到解决方案</em></p>
<ol>
<li>尝试在 luci 界面中修改接口设置，但是好像没有移除<code>--interface</code>选项的</li>
<li>安装了<code>ddns-script_no-ip_com</code>包，想看看有没有关于<code>--interface</code>的选项，但是安装后在 luci 界面的服务商列表里没找到 noip</li>
<li>尝试自己修改 ddns 的更新脚本，找到脚本所在位置，位于<code>/usr/lib/ddns</code>目录下</li>
<li>查看<code>update_no-ip_com.sh</code>，发现里面调用了<code>do_trasfer</code>函数</li>
<li>查看<code>update_dns_functions.sh</code>，查找<code>do_transfer</code>，查找<code>--interface</code>，找到后注释该行</li>
<li>重启 ddns 服务，发现问题已经解决了</li>
</ol>
<p>整个过程大约花了 2 个小时，但是具体是哪里设置错误导致不能更新还是不太明白，也不愿意深究了，能正常工作就行。</p>
]]></content>
      <categories>
        <category>折腾小记</category>
      </categories>
      <tags>
        <tag>OpenWRT</tag>
      </tags>
  </entry>
</search>
